package cfg

import (
	"errors"
	"example.com/mastermindv2/game/token/hint"
	"fmt"
	flag "github.com/spf13/pflag" // pflag allows both --flag & -f
	"os"
	"path/filepath"
	"regexp"
	"strconv"
	"strings"
)

// ////////////////////////////////////////////////////////////////////////////
const GameIdDelim = ":"
const SeedUndefined = -1

type Config struct {
	NumTokens    int
	MaxDigit     int
	IsPermitDups bool
	IsEasyHint   bool
	Seed         int64 // SeedUndefined = Program to use a random seed
	IsShowSecret bool
	IsShowRules  bool
}

// ////////////////////////////////////////////////////////////////////////////
// The usagePreamble immediately precedes a usage line. If it is not empty, it
// would normally end with newline.
func setupCmdLineFlags(usagePreamble string) {
	// Improve the look of the text auto-generated by the pflag module
	flag.Usage = func() { // Re-define the Usage var
		fmt.Fprintf(os.Stderr, "%sUsage of %s:\n", usagePreamble, filepath.Base(os.Args[0]))
		flag.PrintDefaults()
	}
	flag.ErrHelp = errors.New("") // Redefine ErrHelp
}

// ////////////////////////////////////////////////////////////////////////////
func verifyCmdLineOpts(config Config) {
	if config.NumTokens < 1 {
		fmt.Printf("Error: num-pos is %d, but must be at least 1\n", config.NumTokens)
		os.Exit(1)
	}
	if config.MaxDigit < 1 || config.MaxDigit > 9 {
		fmt.Printf("Error: max-digit is %d, but must be between 1 and 9 inclusive\n", config.MaxDigit)
		os.Exit(1)
	}
}

// ////////////////////////////////////////////////////////////////////////////
func GameIdToConfig(GameId string, isShowSecret, isEasyHint bool) Config {
	// GameId format: "998877:4:5:t:f" or "998877:4:5:t"
	// represents:  "{Random-Seed}:{NumTokens}:{MaxDigit}:{IsPermitDups}:{IsEasyHint}"
	var err error
	config := Config{} // All fields are zero / false
	strs := strings.Split(GameId, GameIdDelim)

	if len(strs) != 4 && len(strs) != 5 {
		fmt.Printf("GameId: Expected 4 or 5 fields separated by '%s' but found %d.\n", GameIdDelim, len(strs))
		os.Exit(2)
	}
	config.Seed, err = strconv.ParseInt(strs[0], 10, 64) // int64
	if err != nil {
		fmt.Printf("GameId: Expected first field to be a non-negative integer, but found '%s'\n", strs[0])
		os.Exit(2)
	}
	config.NumTokens, err = strconv.Atoi(strs[1])
	if err != nil {
		fmt.Printf("GameId: Expected second field to be an integer, but found '%s'\n", strs[1])
		os.Exit(2)
	}
	config.MaxDigit, err = strconv.Atoi(strs[2])
	if err != nil {
		fmt.Printf("GameId: Expected third field to be an integer, but found '%s'\n", strs[2])
		os.Exit(2)
	}
	// config.IsPermitDups
	if strs[3] != "f" && strs[3] != "t" {
		fmt.Printf("GameId: Expected fourth field to be 't' or 'f', but found '%s'\n", strs[3])
		os.Exit(2)
	}
	if strs[3] == "t" {
		config.IsPermitDups = true // Override default of false
	}
	// config.IsEasyHint
	if len(strs) == 5 {
		if strs[4] != "f" && strs[4] != "t" {
			fmt.Printf("GameId: Expected fifth field to be 't' or 'f', but found '%s'\n", strs[4])
			os.Exit(2)
		}
		if strs[4] == "t" {
			config.IsEasyHint = true // Override default of false
		}
	} else {
		config.IsEasyHint = isEasyHint // Override default of false
	}
	config.IsShowSecret = isShowSecret
	return config
}

// ////////////////////////////////////////////////////////////////////////////
func ConfigToGameId(config Config) string {
	if config.Seed == SeedUndefined {
		return ""
	} else {
		return fmt.Sprintf("%d%s%d%s%d%s%s%s%s",
			config.Seed, GameIdDelim,
			config.NumTokens, GameIdDelim,
			config.MaxDigit, GameIdDelim,
			string(strconv.FormatBool(config.IsPermitDups)[0]), GameIdDelim,
			string(strconv.FormatBool(config.IsEasyHint)[0]),
		)
	}
}

// ////////////////////////////////////////////////////////////////////////////
func cmdLineOptUsagePreamble() string {
	text := `
	This is the game of Mastermind.
	- A *brief* description of command line options is shown here
	- More details about command line options are given in the rules
	  (see below)

`
	re, _ := regexp.Compile("(?m)^\t")   // (?m) where m-flag is multi-line mode
	return re.ReplaceAllString(text, "") // Change indent
}

// ////////////////////////////////////////////////////////////////////////////
func ProcessCmdLineOpts() (config Config) {
	setupCmdLineFlags(cmdLineOptUsagePreamble())

	var numTokens, maxDigit int
	var isPermitDups, isShowSecret bool
	var isGame0, isGame1, isGame2, isGame3, isGame4, isGame5 bool
	var isShowRules, isEasyHint bool
	var GameId string

	flag.IntVarP(&numTokens, "num-pos", "n", 4, "Number of digit positions (e.g. 4 positions would be 3524 or 2201")
	flag.IntVarP(&maxDigit, "max-digit", "m", 5, "Maximum digit (i.e. each digit can range from 0 to 'max-digit')")
	flag.BoolVarP(&isPermitDups, "allow-dups", "d", false, "Allow the secret to contain duplicate digits (e.g. 4212)")
	flag.BoolVarP(&isShowSecret, "cheat", "c", false, "Cheat by showing the secret set of digits")

	msgGameId := fmt.Sprintf("Game ID e.g. 998877%s4%s5%st%sf. The last 2 characters (%st or %sf) control optional 'easy hints'",
		GameIdDelim, GameIdDelim, GameIdDelim, GameIdDelim, GameIdDelim, GameIdDelim)
	flag.StringVarP(&GameId, "gameid", "g", "", msgGameId)

	msgEasyHint := fmt.Sprintf("Use easy hints: '%s'/'%s' show the exact position of each black/white peg", hint.PHGoodPos, hint.PHBadPos)
	flag.BoolVarP(&isEasyHint, "easy-hints", "e", false, msgEasyHint)
	flag.BoolVarP(&isShowRules, "rules", "r", false, "Show the rules of the game")

	flag.BoolVarP(&isGame0, "game-adv-dups", "0", false, "Advanced game: 5 positions; max digit 7; with duplicate digits")
	flag.BoolVarP(&isGame1, "game-adv-nodups", "1", false, "Advanced game: 5 positions; max digit 7; no duplicate digits")
	flag.BoolVarP(&isGame2, "game-classic-dups", "2", false, "Classic game:  4 positions; max digit 5; with duplicate digits")
	flag.BoolVarP(&isGame3, "game-classic-nodups", "3", false, "Classic game:  4 positions; max digit 5; no duplicate digits")
	flag.BoolVarP(&isGame4, "game-kids-dups", "4", false, "Kids game:     3 positions; max digit 5; with duplicate digits")
	flag.BoolVarP(&isGame5, "game-kids-nodups", "5", false, "Kids game:     3 positions; max digit 5; no duplicate digits")
	flag.Parse()

	if isShowRules {
		return Config{IsShowRules: true}
	} else if GameId != "" {
		config = GameIdToConfig(GameId, isShowSecret, isEasyHint)
		verifyCmdLineOpts(config)
		return
	}

	switch {
	case isGame0:
		config = Config{NumTokens: 5, MaxDigit: 7, IsPermitDups: true}
	case isGame1:
		config = Config{NumTokens: 5, MaxDigit: 7, IsPermitDups: false}
	case isGame2:
		config = Config{NumTokens: 4, MaxDigit: 5, IsPermitDups: true}
	case isGame3:
		config = Config{NumTokens: 4, MaxDigit: 5, IsPermitDups: false}
	case isGame4:
		config = Config{NumTokens: 3, MaxDigit: 5, IsPermitDups: true}
	case isGame5:
		config = Config{NumTokens: 3, MaxDigit: 5, IsPermitDups: false}
	default:
		config = Config{NumTokens: numTokens, MaxDigit: maxDigit, IsPermitDups: isPermitDups}
	}
	config.IsShowSecret = isShowSecret
	config.IsEasyHint = isEasyHint
	config.Seed = SeedUndefined
	verifyCmdLineOpts(config)
	return
}
